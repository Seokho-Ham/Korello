{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/Users/cocoball/Korello/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cocoball/Korello/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/cocoball/Korello/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef}from'react';import{usePostApi}from'../../api/index';var NewBoardForm=function NewBoardForm(_ref){var onClickHandler=_ref.onClickHandler,setUpdate=_ref.setUpdate,display=_ref.display;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),boardName=_useState2[0],setBoardName=_useState2[1];var inputRef=useRef(null);var _usePostApi=usePostApi(),_usePostApi2=_slicedToArray(_usePostApi,1),postData=_usePostApi2[0];var onChangeHandler=function onChangeHandler(e){setBoardName(e.target.value);};var keyHandler=function keyHandler(e){if(e.key==='Enter'){addBoard();}};var addBoard=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var code;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(boardName.length>0)){_context.next=8;break;}_context.next=3;return postData('/board',{name:boardName});case 3:code=_context.sent;console.log(code);if(code===201){setBoardName('');onClickHandler();setUpdate(function(p){return!p;});}else{alert('생성에 실패했습니다.');setBoardName('');inputRef.current.focus();}_context.next=10;break;case 8:alert('이름을 입력해주세요.');inputRef.current.focus();case 10:case\"end\":return _context.stop();}}},_callee);}));return function addBoard(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"span\",{className:\"add-board-form\",style:{display:display?'block':'none'},children:[/*#__PURE__*/_jsx(\"input\",{ref:inputRef,placeholder:\"board name\",value:boardName,onChange:onChangeHandler,onKeyPress:keyHandler}),/*#__PURE__*/_jsx(\"button\",{onClick:addBoard,children:\"Add\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onClickHandler,children:\"Cancel\"})]});};export default NewBoardForm;","map":{"version":3,"sources":["/Users/cocoball/Korello/src/components/board/NewBoardForm.jsx"],"names":["React","useState","useRef","usePostApi","NewBoardForm","onClickHandler","setUpdate","display","boardName","setBoardName","inputRef","postData","onChangeHandler","e","target","value","keyHandler","key","addBoard","length","name","code","console","log","p","alert","current","focus"],"mappings":"+fAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,KAAwC,OAAxC,CACA,OAASC,UAAT,KAA2B,iBAA3B,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAA4C,IAAzCC,CAAAA,cAAyC,MAAzCA,cAAyC,CAAzBC,SAAyB,MAAzBA,SAAyB,CAAdC,OAAc,MAAdA,OAAc,eAC7BN,QAAQ,CAAC,EAAD,CADqB,wCACxDO,SADwD,eAC7CC,YAD6C,eAE/D,GAAMC,CAAAA,QAAQ,CAAGR,MAAM,CAAC,IAAD,CAAvB,CAF+D,gBAG5CC,UAAU,EAHkC,4CAGxDQ,QAHwD,iBAK/D,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,CAAC,CAAI,CAC3BJ,YAAY,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CACD,CAFD,CAIA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAH,CAAC,CAAI,CACtB,GAAIA,CAAC,CAACI,GAAF,GAAU,OAAd,CAAuB,CACrBC,QAAQ,GACT,CACF,CAJD,CAKA,GAAMA,CAAAA,QAAQ,2FAAG,iJACXV,SAAS,CAACW,MAAV,CAAmB,CADR,gDAEMR,CAAAA,QAAQ,CAAC,QAAD,CAAW,CACpCS,IAAI,CAAEZ,SAD8B,CAAX,CAFd,QAEPa,IAFO,eAKbC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACA,GAAIA,IAAI,GAAK,GAAb,CAAkB,CAChBZ,YAAY,CAAC,EAAD,CAAZ,CACAJ,cAAc,GACdC,SAAS,CAAC,SAAAkB,CAAC,QAAI,CAACA,CAAL,EAAF,CAAT,CACD,CAJD,IAIO,CACLC,KAAK,CAAC,aAAD,CAAL,CACAhB,YAAY,CAAC,EAAD,CAAZ,CACAC,QAAQ,CAACgB,OAAT,CAAiBC,KAAjB,GACD,CAdY,8BAgBbF,KAAK,CAAC,aAAD,CAAL,CACAf,QAAQ,CAACgB,OAAT,CAAiBC,KAAjB,GAjBa,uDAAH,kBAART,CAAAA,QAAQ,2CAAd,CAqBA,mBACE,cACE,SAAS,CAAC,gBADZ,CAEE,KAAK,CAAE,CAAEX,OAAO,CAAEA,OAAO,CAAG,OAAH,CAAa,MAA/B,CAFT,wBAIE,cACE,GAAG,CAAEG,QADP,CAEE,WAAW,CAAC,YAFd,CAGE,KAAK,CAAEF,SAHT,CAIE,QAAQ,CAAEI,eAJZ,CAKE,UAAU,CAAEI,UALd,EAJF,cAWE,eAAQ,OAAO,CAAEE,QAAjB,iBAXF,cAYE,eAAQ,OAAO,CAAEb,cAAjB,oBAZF,GADF,CAgBD,CAnDD,CAqDA,cAAeD,CAAAA,YAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { usePostApi } from '../../api/index';\n\nconst NewBoardForm = ({ onClickHandler, setUpdate, display }) => {\n  const [boardName, setBoardName] = useState('');\n  const inputRef = useRef(null);\n  const [postData] = usePostApi();\n\n  const onChangeHandler = e => {\n    setBoardName(e.target.value);\n  };\n\n  const keyHandler = e => {\n    if (e.key === 'Enter') {\n      addBoard();\n    }\n  };\n  const addBoard = async () => {\n    if (boardName.length > 0) {\n      const code = await postData('/board', {\n        name: boardName,\n      });\n      console.log(code);\n      if (code === 201) {\n        setBoardName('');\n        onClickHandler();\n        setUpdate(p => !p);\n      } else {\n        alert('생성에 실패했습니다.');\n        setBoardName('');\n        inputRef.current.focus();\n      }\n    } else {\n      alert('이름을 입력해주세요.');\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <span\n      className='add-board-form'\n      style={{ display: display ? 'block' : 'none' }}\n    >\n      <input\n        ref={inputRef}\n        placeholder='board name'\n        value={boardName}\n        onChange={onChangeHandler}\n        onKeyPress={keyHandler}\n      />\n      <button onClick={addBoard}>Add</button>\n      <button onClick={onClickHandler}>Cancel</button>\n    </span>\n  );\n};\n\nexport default NewBoardForm;\n"]},"metadata":{},"sourceType":"module"}